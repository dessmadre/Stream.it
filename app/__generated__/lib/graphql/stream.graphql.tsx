/* d25163585dd750f55c6e6cbc65d31b98ab8adc82
 * This file is automatically generated by graphql-let. */

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Mongo object id scalar type */
  ObjectId: any;
};

export type AuthInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addStream: Stream;
  deleteStream: Scalars['Boolean'];
  editStream: Stream;
  login: UserResponse;
  register: UserResponse;
};


export type MutationAddStreamArgs = {
  input: StreamInput;
};


export type MutationDeleteStreamArgs = {
  streamId: Scalars['ObjectId'];
};


export type MutationEditStreamArgs = {
  input: StreamInput;
};


export type MutationLoginArgs = {
  input: AuthInput;
};


export type MutationRegisterArgs = {
  input: AuthInput;
};


export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  stream?: Maybe<Stream>;
  streams: Array<Stream>;
  user?: Maybe<User>;
};


export type QueryStreamArgs = {
  streamId: Scalars['ObjectId'];
};


export type QueryUserArgs = {
  userId: Scalars['ObjectId'];
};

export type Stream = {
  __typename?: 'Stream';
  _id: Scalars['ObjectId'];
  author: User;
  description: Scalars['String'];
  title: Scalars['String'];
  url: Scalars['String'];
};

export type StreamInput = {
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ObjectId']>;
  title: Scalars['String'];
  url: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  _id: Scalars['ObjectId'];
  email: Scalars['String'];
  password: Scalars['String'];
};

export type UserResponse = {
  __typename?: 'UserResponse';
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

export type StreamQueryVariables = Exact<{
  streamId: Scalars['ObjectId'];
}>;


export type StreamQuery = (
  { __typename?: 'Query' }
  & { stream?: Maybe<(
    { __typename?: 'Stream' }
    & Pick<Stream, '_id' | 'title' | 'description' | 'url'>
    & { author: (
      { __typename?: 'User' }
      & Pick<User, '_id' | 'email'>
    ) }
  )> }
);


export const StreamDocument = gql`
    query Stream($streamId: ObjectId!) {
  stream(streamId: $streamId) {
    _id
    title
    description
    url
    author {
      _id
      email
    }
  }
}
    `;

/**
 * __useStreamQuery__
 *
 * To run a query within a React component, call `useStreamQuery` and pass it any options that fit your needs.
 * When your component renders, `useStreamQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStreamQuery({
 *   variables: {
 *      streamId: // value for 'streamId'
 *   },
 * });
 */
export function useStreamQuery(baseOptions: Apollo.QueryHookOptions<StreamQuery, StreamQueryVariables>) {
        return Apollo.useQuery<StreamQuery, StreamQueryVariables>(StreamDocument, baseOptions);
      }
export function useStreamLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StreamQuery, StreamQueryVariables>) {
          return Apollo.useLazyQuery<StreamQuery, StreamQueryVariables>(StreamDocument, baseOptions);
        }
export type StreamQueryHookResult = ReturnType<typeof useStreamQuery>;
export type StreamLazyQueryHookResult = ReturnType<typeof useStreamLazyQuery>;
export type StreamQueryResult = Apollo.QueryResult<StreamQuery, StreamQueryVariables>;